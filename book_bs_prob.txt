#include <bits/stdc++.h>
using namespace std;

// int bs(vector<int>arr,int x){
//     int n=arr.size();
//     int low=0;
//     int high=n-1;
    
//     while(low<=high){
//         int mid=(low+high)/2;
//         if(arr[mid]>x){high=mid-1;}
//         else if(arr[mid]==x){return mid;}
//         else{low=mid+1;}
//     }
//     return 0;
// }
// int insert(vector<int>arr,int x){
//     int n=arr.size();
//     int low=0;
//     int high=n-1;
    
//     while(low<=high){
//         int mid=(low+high)/2;
//         if(arr[mid]>x){high=mid-1;}
//         else if(arr[mid]==x){return mid;}
//         else{low=mid+1;}
//     }
//     return low;
    
// }
// int flor(vector<int>arr,int x){
//     int n=arr.size();
//     int low=0;
//     int high=n-1;
    
//     while(low<=high){
//         int mid=(low+high)/2;
//         if(arr[mid]==x)return arr[mid];
//         else if(arr[mid]>x) high=mid-1;
//         else low=mid+1;
//     }
//     return arr[high];
// }
// int cel(vector<int>arr,int x){
//     int n=arr.size();
//     int low=0;
//     int high=n-1;
    
//     while(low<=high){
//         int mid=(low+high)/2;
//         if(arr[mid]==x)return arr[mid];
//         else if(arr[mid]>x) high=mid-1;
//         else low=mid+1;
//     }
//     return arr[low];
// } 
// int tgt(vector<int>arr,int x){
//     int n=arr.size();
//     int low=1;
//     int high=n-2;
    
//     while(low<=high){
//         int mid=(low+high)/2;
//         if(arr[mid]==x)return mid;
//         else if(arr[mid]<x&&x<=arr[high])low=mid+1;
//         else if(arr[mid]>x&&x<=arr[high])low=mid;
//         else high=mid-1;
//     }
//     return -1;
// }
// long long floorSqrt(long long n){
//         int temp=n;
//         while(temp*temp>=n){
//             temp=temp/2;
//         }
//         while(temp*temp<=n){
//             temp++;
//         }
//         return temp-1;
        
    
//     }
int canbeallocated(vector<int> &nums,int m,int mid){
        int count=1;
        int pages=0;
        for(int i=0;i<nums.size();i++){
            if(pages+nums[i]>=mid){
                pages=nums[i];
                count++;
            }    
            pages=pages+nums[i];
        }
        return count;
    }
int min(vector<int> &arr){
        int min=INT_MAX;
        for(int i=0;i<arr.size();i++){
            if(min>arr[i])min=arr[i];
        }
        return min;
    }
int max(vector<int> &arr){
        int maxo=INT_MIN;
        for(int i=0;i<arr.size();i++){
            if(maxo<arr[i]) maxo=arr[i];
        }
        return maxo;
    }
int sum(vector<int> &nums){
        int sum=0;
        for(int i=0;i<nums.size();i++){
            sum=sum+nums[i];
        }
        return sum;
    }
int findPages(vector<int> &nums, int m)  {
        int low=max(nums);
        int high=sum(nums);

        while(low<=high){
            int mid=(high+low)/2;

            if(canbeallocated(nums,m,mid)<=m)high=mid-1;
            else low=mid+1;
        }
        return high;
    }
int main() {
    int n;
    cin>>n;
    int m;
    cin>>m;
    vector<int> arr(n);
    for (int i = 0; i < n; i++) {
        cin>>arr[i];
    }
    cout<<findPages(arr,m);
    return 0;
}
